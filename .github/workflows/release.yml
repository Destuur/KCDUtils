name: Build KCD Utils ZIP on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  build-zip:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo mit Token
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true 
          fetch-depth: 0

      # 2. Install dependencies
      - name: Install dependencies
        run: sudo apt-get install -y zip xmlstarlet

      # 3. Bump version based on commit messages
      - name: Determine new version
        id: version
        run: |
          CURRENT=$(xmlstarlet sel -t -v "//info/version" mod.manifest)
          echo "Current version: $CURRENT"
      
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      
          if [ -z "$LAST_TAG" ]; then
              echo "No tags found, using all commits."
              COMMITS=$(git log --pretty=format:%s)
          else
              echo "Last tag: $LAST_TAG"
              COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:%s)
          fi
      
          echo "Commits since last tag:"
          echo "$COMMITS"
      
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$PATCH

          if echo "$COMMITS" | grep -iq "\[major\]"; then
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
          elif echo "$COMMITS" | grep -iq "\[minor\]"; then
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
          else
              NEW_PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update mod.manifest
          xmlstarlet ed -L -u "//info/version" -v "$NEW_VERSION" mod.manifest

          # Update README version
          sed -i "s/{{NEW_VERSION}}/$NEW_VERSION/g" README.md

          # Export for next steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # 4. Tag the new version
      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add mod.manifest README.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || echo "No changes to commit"
          git tag ${{ steps.version.outputs.new_version }}
          git push origin main --tags

      # 5. Prepare ZIP folder
      - name: Prepare kcdutils folder
        run: |
          mkdir -p temp_kcdutils/kcdutils
          shopt -s extglob
          cp -r !(temp_kcdutils|.github|.git) temp_kcdutils/kcdutils/

      - name: Create ZIP
        run: zip -r kcdutils-${{ steps.version.outputs.new_version }}.zip temp_kcdutils/kcdutils

      # 6. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: kcdutils-${{ steps.version.outputs.new_version }}.zip
          tag_name: ${{ steps.version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
